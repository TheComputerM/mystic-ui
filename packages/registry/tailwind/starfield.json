{"id":"starfield","content":"import {\n\ttype Component,\n\ttype JSX,\n\tcreateEffect,\n\tmergeProps,\n\tonMount,\n\tsplitProps,\n} from \"solid-js\";\n\n// adapted from: https://github.com/Ashikpaul/Starfield-effect\n\nexport interface StarfieldProps\n\textends JSX.CanvasHTMLAttributes<HTMLCanvasElement> {\n\tbackground?: string;\n\tcolor?: string;\n\tquantity?: number;\n\tsize?: number;\n\tspeed?: number;\n}\n\nexport const Starfield: Component<StarfieldProps> = (props) => {\n\tconst [_localProps, forwardProps] = splitProps(props, [\n\t\t\"background\",\n\t\t\"color\",\n\t\t\"quantity\",\n\t\t\"size\",\n\t\t\"speed\",\n\t]);\n\n\tconst localProps = mergeProps(\n\t\t{\n\t\t\tbackground: \"rgba(0, 0, 0, 0.25)\",\n\t\t\tcolor: \"rgb(255, 255, 255)\",\n\t\t\tquantity: 250,\n\t\t\tsize: 1,\n\t\t\tspeed: 0.04,\n\t\t},\n\t\t_localProps,\n\t);\n\n\tlet canvasRef!: HTMLCanvasElement;\n\tlet ctx!: CanvasRenderingContext2D;\n\n\tclass Star {\n\t\tx: number;\n\t\ty: number;\n\t\tz: number;\n\t\tpx: number;\n\t\tpy: number;\n\t\tconstructor() {\n\t\t\tthis.x = Math.random() * canvasRef.width - canvasRef.width / 2;\n\t\t\tthis.y = Math.random() * canvasRef.height - canvasRef.height / 2;\n\t\t\tthis.px = this.x;\n\t\t\tthis.py = this.y;\n\t\t\tthis.z = Math.random() * 4;\n\t\t}\n\n\t\tupdate() {\n\t\t\tthis.px = this.x;\n\t\t\tthis.py = this.y;\n\t\t\tthis.z += localProps.speed;\n\t\t\tthis.x += this.x * (localProps.speed * 0.2) * this.z;\n\t\t\tthis.y += this.y * (localProps.speed * 0.2) * this.z;\n\t\t\tif (\n\t\t\t\tthis.x > canvasRef.width / 2 + 50 ||\n\t\t\t\tthis.x < -canvasRef.width / 2 - 50 ||\n\t\t\t\tthis.y > canvasRef.height / 2 + 50 ||\n\t\t\t\tthis.y < -canvasRef.height / 2 - 50\n\t\t\t) {\n\t\t\t\tthis.x = Math.random() * canvasRef.width - canvasRef.width / 2;\n\t\t\t\tthis.y = Math.random() * canvasRef.height - canvasRef.height / 2;\n\t\t\t\tthis.px = this.x;\n\t\t\t\tthis.py = this.y;\n\t\t\t\tthis.z = 0;\n\t\t\t}\n\t\t}\n\n\t\tdraw() {\n\t\t\tctx.lineWidth = this.z * localProps.size;\n\t\t\tctx.beginPath();\n\t\t\tctx.moveTo(this.x, this.y);\n\t\t\tctx.lineTo(this.px, this.py);\n\t\t\tctx.stroke();\n\t\t}\n\t}\n\n\tcreateEffect(() => {\n\t\tctx.fillStyle = localProps.background;\n\t});\n\n\tcreateEffect(() => {\n\t\tctx.strokeStyle = localProps.color;\n\t});\n\n\tfunction setCanvasCenter() {\n\t\tctx.translate(canvasRef.width / 2, canvasRef.height / 2);\n\t}\n\n\tonMount(() => {\n\t\tsetCanvasCenter();\n\t});\n\n\tcreateEffect(() => {\n\t\tconst stars = Array.from({ length: localProps.quantity }, () => new Star());\n\n\t\tlet animationHandle: number;\n\t\tfunction draw() {\n\t\t\tctx.fillRect(\n\t\t\t\t-canvasRef.width / 2,\n\t\t\t\t-canvasRef.height / 2,\n\t\t\t\tcanvasRef.width,\n\t\t\t\tcanvasRef.height,\n\t\t\t);\n\t\t\tfor (const star of stars) {\n\t\t\t\tstar.update();\n\t\t\t\tstar.draw();\n\t\t\t}\n\t\t\tanimationHandle = requestAnimationFrame(draw);\n\t\t}\n\n\t\tdraw();\n\n\t\treturn () => cancelAnimationFrame(animationHandle);\n\t});\n\n\treturn (\n\t\t<canvas\n\t\t\tref={(canvas) => {\n\t\t\t\tcanvasRef = canvas;\n\t\t\t\tconst context = canvas.getContext(\"2d\");\n\t\t\t\tif (context) {\n\t\t\t\t\tctx = context;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(\"Failed to get 2D context\");\n\t\t\t\t}\n\t\t\t}}\n\t\t\t{...forwardProps}\n\t\t/>\n\t);\n};\n"}