{"name":"number-ticker","dependencies":["motion"],"tailwind":{"file":"import { animate, inView, spring } from \"motion\";\nimport {\n\ttype Component,\n\ttype JSX,\n\tmergeProps,\n\tonMount,\n\tsplitProps,\n} from \"solid-js\";\n\nexport interface NumberTickerProps extends JSX.HTMLAttributes<HTMLSpanElement> {\n\tvalue?: number;\n\tdirection?: \"up\" | \"down\";\n\tdelay?: number;\n\tdecimalPlaces?: number;\n}\n\nexport const NumberTicker: Component<NumberTickerProps> = (props) => {\n\tconst [_localProps, forwardProps] = splitProps(props, [\n\t\t\"value\",\n\t\t\"direction\",\n\t\t\"delay\",\n\t\t\"decimalPlaces\",\n\t]);\n\tconst localProps = mergeProps(\n\t\t{ value: 100, direction: \"up\" as const, delay: 0, decimalPlaces: 0 },\n\t\t_localProps,\n\t);\n\tlet ref!: HTMLSpanElement;\n\n\tonMount(() => {\n\t\tinView(ref, () => {\n\t\t\tanimate(\n\t\t\t\t(progress) => {\n\t\t\t\t\tlet latest = progress * localProps.value;\n\t\t\t\t\tif (localProps.direction === \"down\") {\n\t\t\t\t\t\tlatest = localProps.value - latest;\n\t\t\t\t\t}\n\t\t\t\t\tref.textContent = Intl.NumberFormat(\"en-US\", {\n\t\t\t\t\t\tminimumFractionDigits: localProps.decimalPlaces,\n\t\t\t\t\t\tmaximumFractionDigits: localProps.decimalPlaces,\n\t\t\t\t\t}).format(Number(latest.toFixed(localProps.decimalPlaces)));\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdelay: localProps.delay,\n\t\t\t\t\teasing: spring({ stiffness: 100, damping: 60 }),\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t});\n\n\treturn <span {...forwardProps} ref={ref} />;\n};\n"},"panda":{"file":"import { animate, inView, spring } from \"motion\";\nimport {\n\ttype Component,\n\ttype JSX,\n\tmergeProps,\n\tonMount,\n\tsplitProps,\n} from \"solid-js\";\n\nexport interface NumberTickerProps extends JSX.HTMLAttributes<HTMLSpanElement> {\n\tvalue?: number;\n\tdirection?: \"up\" | \"down\";\n\tdelay?: number;\n\tdecimalPlaces?: number;\n}\n\nexport const NumberTicker: Component<NumberTickerProps> = (props) => {\n\tconst [_localProps, forwardProps] = splitProps(props, [\n\t\t\"value\",\n\t\t\"direction\",\n\t\t\"delay\",\n\t\t\"decimalPlaces\",\n\t]);\n\tconst localProps = mergeProps(\n\t\t{ value: 100, direction: \"up\" as const, delay: 0, decimalPlaces: 0 },\n\t\t_localProps,\n\t);\n\tlet ref!: HTMLSpanElement;\n\n\tonMount(() => {\n\t\tinView(ref, () => {\n\t\t\tanimate(\n\t\t\t\t(progress) => {\n\t\t\t\t\tlet latest = progress * localProps.value;\n\t\t\t\t\tif (localProps.direction === \"down\") {\n\t\t\t\t\t\tlatest = localProps.value - latest;\n\t\t\t\t\t}\n\t\t\t\t\tref.textContent = Intl.NumberFormat(\"en-US\", {\n\t\t\t\t\t\tminimumFractionDigits: localProps.decimalPlaces,\n\t\t\t\t\t\tmaximumFractionDigits: localProps.decimalPlaces,\n\t\t\t\t\t}).format(Number(latest.toFixed(localProps.decimalPlaces)));\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tdelay: localProps.delay,\n\t\t\t\t\teasing: spring({ stiffness: 100, damping: 60 }),\n\t\t\t\t},\n\t\t\t);\n\t\t});\n\t});\n\n\treturn <span {...forwardProps} ref={ref} />;\n};\n"}}