{"name":"grid-pattern","files":[{"name":"grid-pattern.tsx","tailwind":"import {\n\ttype Component,\n\tFor,\n\tShow,\n\tcreateUniqueId,\n\tmergeProps,\n\tsplitProps,\n} from \"solid-js\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface GridPatternProps {\n\tclass?: string;\n\theight?: number;\n\tsquares?: Array<[x: number, y: number]>;\n\tstrokeDasharray?: string;\n\twidth?: number;\n\tx?: number;\n\ty?: number;\n}\n\nexport const GridPattern: Component<GridPatternProps> = (\n\tprops: GridPatternProps,\n) => {\n\tconst [_localProps, forwardProps] = splitProps(props, [\n\t\t\"class\",\n\t\t\"height\",\n\t\t\"squares\",\n\t\t\"strokeDasharray\",\n\t\t\"width\",\n\t\t\"x\",\n\t\t\"y\",\n\t]);\n\tconst localProps = mergeProps(\n\t\t{ width: 40, height: 40, x: -1, y: -1, strokeDasharray: \"0\", squares: [] },\n\t\t_localProps,\n\t);\n\tconst id = createUniqueId();\n\n\treturn (\n\t\t<svg\n\t\t\taria-hidden=\"true\"\n\t\t\tclass={cn(\n\t\t\t\t\"pointer-events-none absolute inset-0 h-full w-full fill-gray-400/30 stroke-gray-400/30\",\n\t\t\t\tlocalProps.class,\n\t\t\t)}\n\t\t\t{...forwardProps}\n\t\t>\n\t\t\t<defs>\n\t\t\t\t<pattern\n\t\t\t\t\tid={id}\n\t\t\t\t\twidth={localProps.width}\n\t\t\t\t\theight={localProps.height}\n\t\t\t\t\tpatternUnits=\"userSpaceOnUse\"\n\t\t\t\t\tx={localProps.x}\n\t\t\t\t\ty={localProps.y}\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td={`M.5 ${localProps.height}V.5H${localProps.width}`}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tstroke-dasharray={localProps.strokeDasharray}\n\t\t\t\t\t/>\n\t\t\t\t</pattern>\n\t\t\t</defs>\n\t\t\t<rect width=\"100%\" height=\"100%\" stroke-width={0} fill={`url(#${id})`} />\n\t\t\t<Show when={localProps.squares}>\n\t\t\t\t<svg\n\t\t\t\t\tx={localProps.x}\n\t\t\t\t\ty={localProps.y}\n\t\t\t\t\tclass=\"overflow-visible\"\n\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t>\n\t\t\t\t\t<For each={localProps.squares}>\n\t\t\t\t\t\t{([x, y]) => (\n\t\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\t\tstroke-width=\"0\"\n\t\t\t\t\t\t\t\twidth={localProps.width - 1}\n\t\t\t\t\t\t\t\theight={localProps.height - 1}\n\t\t\t\t\t\t\t\tx={x * localProps.width + 1}\n\t\t\t\t\t\t\t\ty={y * localProps.height + 1}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</For>\n\t\t\t\t</svg>\n\t\t\t</Show>\n\t\t</svg>\n\t);\n};\n","panda":"import {\n\ttype Component,\n\tFor,\n\tShow,\n\tcreateUniqueId,\n\tmergeProps,\n\tsplitProps,\n} from \"solid-js\";\nimport { css, cx } from \"styled-system/css\";\n\nexport interface GridPatternProps {\n\tclass?: string;\n\theight?: number;\n\tsquares?: Array<[x: number, y: number]>;\n\tstrokeDasharray?: string;\n\twidth?: number;\n\tx?: number;\n\ty?: number;\n}\n\nexport const GridPattern: Component<GridPatternProps> = (\n\tprops: GridPatternProps,\n) => {\n\tconst [_localProps, forwardProps] = splitProps(props, [\n\t\t\"class\",\n\t\t\"height\",\n\t\t\"squares\",\n\t\t\"strokeDasharray\",\n\t\t\"width\",\n\t\t\"x\",\n\t\t\"y\",\n\t]);\n\tconst localProps = mergeProps(\n\t\t{ width: 40, height: 40, x: -1, y: -1, strokeDasharray: \"0\", squares: [] },\n\t\t_localProps,\n\t);\n\tconst id = createUniqueId();\n\n\treturn (\n\t\t<svg\n\t\t\taria-hidden=\"true\"\n\t\t\tclass={cx(\n\t\t\t\tcss({\n\t\t\t\t\tpointerEvents: \"none\",\n\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\tinset: \"0\",\n\t\t\t\t\theight: \"full\",\n\t\t\t\t\twidth: \"full\",\n\t\t\t\t\tfill: \"gray.400/30\",\n\t\t\t\t\tstroke: \"gray.400/30\",\n\t\t\t\t}),\n\t\t\t\tlocalProps.class,\n\t\t\t)}\n\t\t\t{...forwardProps}\n\t\t>\n\t\t\t<defs>\n\t\t\t\t<pattern\n\t\t\t\t\tid={id}\n\t\t\t\t\twidth={localProps.width}\n\t\t\t\t\theight={localProps.height}\n\t\t\t\t\tpatternUnits=\"userSpaceOnUse\"\n\t\t\t\t\tx={localProps.x}\n\t\t\t\t\ty={localProps.y}\n\t\t\t\t>\n\t\t\t\t\t<path\n\t\t\t\t\t\td={`M.5 ${localProps.height}V.5H${localProps.width}`}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t\tstroke-dasharray={localProps.strokeDasharray}\n\t\t\t\t\t/>\n\t\t\t\t</pattern>\n\t\t\t</defs>\n\t\t\t<rect width=\"100%\" height=\"100%\" stroke-width={0} fill={`url(#${id})`} />\n\t\t\t<Show when={localProps.squares}>\n\t\t\t\t<svg\n\t\t\t\t\tx={localProps.x}\n\t\t\t\t\ty={localProps.y}\n\t\t\t\t\tclass={css({ overflow: \"visible\" })}\n\t\t\t\t\taria-hidden=\"true\"\n\t\t\t\t>\n\t\t\t\t\t<For each={localProps.squares}>\n\t\t\t\t\t\t{([x, y]) => (\n\t\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\t\tstroke-width=\"0\"\n\t\t\t\t\t\t\t\twidth={localProps.width - 1}\n\t\t\t\t\t\t\t\theight={localProps.height - 1}\n\t\t\t\t\t\t\t\tx={x * localProps.width + 1}\n\t\t\t\t\t\t\t\ty={y * localProps.height + 1}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</For>\n\t\t\t\t</svg>\n\t\t\t</Show>\n\t\t</svg>\n\t);\n};\n"}]}